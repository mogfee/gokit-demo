// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: c575929542
// Version Date: 2020年 6月17日 星期三 04时40分15秒 UTC

package svc

// This file provides service-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/mogfee/gokit-demo/demo"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC SpiderServerServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.SpiderServerServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// spiderserver

		parselist: grpctransport.NewServer(
			endpoints.ParseListEndpoint,
			DecodeGRPCParseListRequest,
			EncodeGRPCParseListResponse,
			serverOptions...,
		),
		parsedetail: grpctransport.NewServer(
			endpoints.ParseDetailEndpoint,
			DecodeGRPCParseDetailRequest,
			EncodeGRPCParseDetailResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the SpiderServerServer interface
type grpcServer struct {
	parselist   grpctransport.Handler
	parsedetail grpctransport.Handler
}

// Methods for grpcServer to implement SpiderServerServer interface

func (s *grpcServer) ParseList(ctx context.Context, req *pb.ParseListRequest) (*pb.ParseListResponse, error) {
	_, rep, err := s.parselist.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ParseListResponse), nil
}

func (s *grpcServer) ParseDetail(ctx context.Context, req *pb.ParseDetailRequest) (*pb.ParseDetailResponse, error) {
	_, rep, err := s.parsedetail.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ParseDetailResponse), nil
}

// Server Decode

// DecodeGRPCParseListRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC parselist request to a user-domain parselist request. Primarily useful in a service.
func DecodeGRPCParseListRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ParseListRequest)
	return req, nil
}

// DecodeGRPCParseDetailRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC parsedetail request to a user-domain parsedetail request. Primarily useful in a service.
func DecodeGRPCParseDetailRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ParseDetailRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCParseListResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain parselist response to a gRPC parselist reply. Primarily useful in a service.
func EncodeGRPCParseListResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ParseListResponse)
	return resp, nil
}

// EncodeGRPCParseDetailResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain parsedetail response to a gRPC parsedetail reply. Primarily useful in a service.
func EncodeGRPCParseDetailResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ParseDetailResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
