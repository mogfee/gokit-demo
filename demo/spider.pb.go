// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: spider.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ParseListResponseItem struct {
	Url string               `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Ext *ParseDetailResponse `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext,omitempty"`
}

func (m *ParseListResponseItem) Reset()         { *m = ParseListResponseItem{} }
func (m *ParseListResponseItem) String() string { return proto.CompactTextString(m) }
func (*ParseListResponseItem) ProtoMessage()    {}
func (*ParseListResponseItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb38e26738aa8833, []int{0}
}
func (m *ParseListResponseItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParseListResponseItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParseListResponseItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParseListResponseItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseListResponseItem.Merge(m, src)
}
func (m *ParseListResponseItem) XXX_Size() int {
	return m.Size()
}
func (m *ParseListResponseItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseListResponseItem.DiscardUnknown(m)
}

var xxx_messageInfo_ParseListResponseItem proto.InternalMessageInfo

func (m *ParseListResponseItem) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ParseListResponseItem) GetExt() *ParseDetailResponse {
	if m != nil {
		return m.Ext
	}
	return nil
}

type ParseListRequest struct {
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *ParseListRequest) Reset()         { *m = ParseListRequest{} }
func (m *ParseListRequest) String() string { return proto.CompactTextString(m) }
func (*ParseListRequest) ProtoMessage()    {}
func (*ParseListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb38e26738aa8833, []int{1}
}
func (m *ParseListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParseListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParseListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParseListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseListRequest.Merge(m, src)
}
func (m *ParseListRequest) XXX_Size() int {
	return m.Size()
}
func (m *ParseListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParseListRequest proto.InternalMessageInfo

func (m *ParseListRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type ParseListResponse struct {
	Item []*ParseListResponseItem `protobuf:"bytes,1,rep,name=item,proto3" json:"item,omitempty"`
}

func (m *ParseListResponse) Reset()         { *m = ParseListResponse{} }
func (m *ParseListResponse) String() string { return proto.CompactTextString(m) }
func (*ParseListResponse) ProtoMessage()    {}
func (*ParseListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb38e26738aa8833, []int{2}
}
func (m *ParseListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParseListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParseListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParseListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseListResponse.Merge(m, src)
}
func (m *ParseListResponse) XXX_Size() int {
	return m.Size()
}
func (m *ParseListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ParseListResponse proto.InternalMessageInfo

func (m *ParseListResponse) GetItem() []*ParseListResponseItem {
	if m != nil {
		return m.Item
	}
	return nil
}

type ParseDetailRequest struct {
	Url     string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *ParseDetailRequest) Reset()         { *m = ParseDetailRequest{} }
func (m *ParseDetailRequest) String() string { return proto.CompactTextString(m) }
func (*ParseDetailRequest) ProtoMessage()    {}
func (*ParseDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb38e26738aa8833, []int{3}
}
func (m *ParseDetailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParseDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParseDetailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParseDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseDetailRequest.Merge(m, src)
}
func (m *ParseDetailRequest) XXX_Size() int {
	return m.Size()
}
func (m *ParseDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParseDetailRequest proto.InternalMessageInfo

func (m *ParseDetailRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ParseDetailRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type ParseDetailResponse struct {
	CompanyName    string `protobuf:"bytes,1,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	Title          string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	City           string `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	JobType        string `protobuf:"bytes,4,opt,name=job_type,json=jobType,proto3" json:"job_type,omitempty"`
	Site           string `protobuf:"bytes,5,opt,name=site,proto3" json:"site,omitempty"`
	BaseId         string `protobuf:"bytes,6,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	Description    string `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Url            string `protobuf:"bytes,8,opt,name=url,proto3" json:"url,omitempty"`
	JobCategory    string `protobuf:"bytes,9,opt,name=job_category,json=jobCategory,proto3" json:"job_category,omitempty"`
	LastUpdateTime string `protobuf:"bytes,10,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	JobCreateTime  string `protobuf:"bytes,11,opt,name=job_create_time,json=jobCreateTime,proto3" json:"job_create_time,omitempty"`
	Country        string `protobuf:"bytes,12,opt,name=country,proto3" json:"country,omitempty"`
	Location       string `protobuf:"bytes,13,opt,name=location,proto3" json:"location,omitempty"`
}

func (m *ParseDetailResponse) Reset()         { *m = ParseDetailResponse{} }
func (m *ParseDetailResponse) String() string { return proto.CompactTextString(m) }
func (*ParseDetailResponse) ProtoMessage()    {}
func (*ParseDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb38e26738aa8833, []int{4}
}
func (m *ParseDetailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParseDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParseDetailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParseDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseDetailResponse.Merge(m, src)
}
func (m *ParseDetailResponse) XXX_Size() int {
	return m.Size()
}
func (m *ParseDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ParseDetailResponse proto.InternalMessageInfo

func (m *ParseDetailResponse) GetCompanyName() string {
	if m != nil {
		return m.CompanyName
	}
	return ""
}

func (m *ParseDetailResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ParseDetailResponse) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *ParseDetailResponse) GetJobType() string {
	if m != nil {
		return m.JobType
	}
	return ""
}

func (m *ParseDetailResponse) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func (m *ParseDetailResponse) GetBaseId() string {
	if m != nil {
		return m.BaseId
	}
	return ""
}

func (m *ParseDetailResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ParseDetailResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ParseDetailResponse) GetJobCategory() string {
	if m != nil {
		return m.JobCategory
	}
	return ""
}

func (m *ParseDetailResponse) GetLastUpdateTime() string {
	if m != nil {
		return m.LastUpdateTime
	}
	return ""
}

func (m *ParseDetailResponse) GetJobCreateTime() string {
	if m != nil {
		return m.JobCreateTime
	}
	return ""
}

func (m *ParseDetailResponse) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func (m *ParseDetailResponse) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func init() {
	proto.RegisterType((*ParseListResponseItem)(nil), "spider.ParseListResponseItem")
	proto.RegisterType((*ParseListRequest)(nil), "spider.ParseListRequest")
	proto.RegisterType((*ParseListResponse)(nil), "spider.ParseListResponse")
	proto.RegisterType((*ParseDetailRequest)(nil), "spider.ParseDetailRequest")
	proto.RegisterType((*ParseDetailResponse)(nil), "spider.ParseDetailResponse")
}

func init() { proto.RegisterFile("spider.proto", fileDescriptor_cb38e26738aa8833) }

var fileDescriptor_cb38e26738aa8833 = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x9b, 0x36, 0x6e, 0xc6, 0x29, 0x2d, 0x0b, 0x88, 0x6d, 0x10, 0x56, 0x6a, 0x21, 0x94,
	0x0b, 0xb1, 0x28, 0x2f, 0x80, 0xf8, 0x93, 0x2a, 0x21, 0x40, 0x69, 0x11, 0x88, 0x4b, 0xb4, 0xb6,
	0x87, 0x74, 0x2b, 0xdb, 0x6b, 0x76, 0xc7, 0x15, 0xbe, 0x72, 0xe3, 0x86, 0xc4, 0xcb, 0xf0, 0x08,
	0x1c, 0x2b, 0x71, 0xe1, 0x88, 0x5a, 0x1e, 0x04, 0x79, 0x9d, 0x94, 0x94, 0xa6, 0x9c, 0xbc, 0xdf,
	0xb7, 0xdf, 0x7c, 0x33, 0xb3, 0x33, 0x86, 0xae, 0x29, 0x64, 0x82, 0x7a, 0x58, 0x68, 0x45, 0x8a,
	0xb5, 0x1b, 0xd4, 0x7b, 0x3a, 0x91, 0x74, 0x50, 0x46, 0xc3, 0x58, 0x65, 0x61, 0x86, 0x24, 0x8e,
	0x50, 0x1b, 0x0c, 0x49, 0x97, 0xc6, 0x84, 0x09, 0xbe, 0x27, 0x8d, 0x18, 0x4e, 0x94, 0x9a, 0xa4,
	0x48, 0x07, 0x52, 0x27, 0x85, 0xd0, 0x54, 0x85, 0x22, 0xcf, 0x15, 0x09, 0x92, 0x2a, 0x37, 0x8d,
	0x5d, 0xf0, 0x16, 0x6e, 0xbc, 0x12, 0xda, 0xe0, 0x73, 0x69, 0x68, 0x84, 0xa6, 0x50, 0xb9, 0xc1,
	0x5d, 0xc2, 0x8c, 0x6d, 0x42, 0xab, 0xd4, 0x29, 0x77, 0xfa, 0xce, 0xa0, 0x33, 0xaa, 0x8f, 0xec,
	0x1e, 0xb4, 0xf0, 0x23, 0xf1, 0xe5, 0xbe, 0x33, 0xf0, 0x76, 0x6e, 0x0d, 0xa7, 0x55, 0xd9, 0xe8,
	0x27, 0x48, 0x42, 0xa6, 0xb3, 0xf8, 0x51, 0xad, 0x0b, 0xee, 0xc0, 0xe6, 0x9c, 0xf3, 0x87, 0x12,
	0x0d, 0x5d, 0x34, 0x0d, 0x9e, 0xc1, 0xd5, 0x0b, 0xf9, 0xd9, 0x7d, 0x58, 0x91, 0x84, 0x19, 0x77,
	0xfa, 0xad, 0x81, 0xb7, 0x73, 0xfb, 0x5c, 0xaa, 0x7f, 0x0b, 0x1d, 0x59, 0x69, 0xf0, 0x10, 0xd8,
	0xb9, 0x4a, 0x2e, 0xc9, 0xc7, 0x38, 0xb8, 0xb1, 0xca, 0x09, 0xf3, 0xa6, 0x91, 0xce, 0x68, 0x06,
	0x83, 0xcf, 0x2d, 0xb8, 0xb6, 0xa0, 0x19, 0xb6, 0x0d, 0xdd, 0x58, 0x65, 0x85, 0xc8, 0xab, 0x71,
	0x2e, 0x32, 0x9c, 0x9a, 0x79, 0x53, 0xee, 0x85, 0xc8, 0x90, 0x5d, 0x87, 0x55, 0x92, 0x94, 0xe2,
	0xd4, 0xb2, 0x01, 0x8c, 0xc1, 0x4a, 0x2c, 0xa9, 0xe2, 0x2d, 0x4b, 0xda, 0x33, 0xdb, 0x82, 0xb5,
	0x43, 0x15, 0x8d, 0xa9, 0x2a, 0x90, 0xaf, 0x34, 0xf9, 0x0f, 0x55, 0xb4, 0x5f, 0x15, 0x56, 0x6e,
	0x24, 0x21, 0x5f, 0x6d, 0xe4, 0xf5, 0x99, 0xdd, 0x04, 0x37, 0x12, 0x06, 0xc7, 0x32, 0xe1, 0x6d,
	0x4b, 0xb7, 0x6b, 0xb8, 0x9b, 0xb0, 0x3e, 0x78, 0x09, 0x9a, 0x58, 0xcb, 0xa2, 0x1e, 0x26, 0x77,
	0x9b, 0x9a, 0xe6, 0xa8, 0x59, 0xeb, 0x6b, 0x7f, 0x5b, 0xdf, 0x86, 0x6e, 0x9d, 0x3b, 0x16, 0x84,
	0x13, 0xa5, 0x2b, 0xde, 0x69, 0x82, 0x0e, 0x55, 0xf4, 0x78, 0x4a, 0xb1, 0x01, 0x6c, 0xa6, 0xc2,
	0xd0, 0xb8, 0x2c, 0x12, 0x41, 0x38, 0x26, 0x99, 0x21, 0x07, 0x2b, 0xbb, 0x52, 0xf3, 0xaf, 0x2d,
	0xbd, 0x2f, 0x33, 0x64, 0x77, 0x61, 0xc3, 0x9a, 0x69, 0x3c, 0x13, 0x7a, 0x56, 0xb8, 0x5e, 0xfb,
	0x59, 0xd6, 0xea, 0xec, 0x7b, 0x97, 0x39, 0xe9, 0x8a, 0x77, 0x67, 0xef, 0x6d, 0x21, 0xeb, 0xc1,
	0x5a, 0xaa, 0x62, 0xbb, 0x8c, 0x7c, 0xdd, 0x5e, 0x9d, 0xe1, 0x9d, 0x6f, 0x0e, 0x74, 0xf7, 0xec,
	0xd0, 0xf7, 0x50, 0x1f, 0xa1, 0x66, 0x2f, 0xa1, 0x73, 0x36, 0x7d, 0xc6, 0x17, 0x2c, 0x84, 0x9d,
	0x77, 0x6f, 0xeb, 0xd2, 0x55, 0x09, 0xd6, 0x3f, 0xfd, 0xf8, 0xfd, 0x75, 0xd9, 0x0d, 0x56, 0xc3,
	0xb4, 0xf6, 0x78, 0x03, 0xde, 0xdc, 0xb0, 0x59, 0x6f, 0xe1, 0x3a, 0x37, 0xa6, 0xff, 0x5b, 0xf5,
	0x60, 0xc3, 0xda, 0x76, 0x02, 0x37, 0x4c, 0xec, 0xc5, 0xa3, 0xed, 0xef, 0x27, 0xbe, 0x73, 0x7c,
	0xe2, 0x3b, 0xbf, 0x4e, 0x7c, 0xe7, 0xcb, 0xa9, 0xbf, 0x74, 0x7c, 0xea, 0x2f, 0xfd, 0x3c, 0xf5,
	0x97, 0xde, 0xb9, 0xc3, 0xd0, 0xfe, 0x73, 0x51, 0xdb, 0x7e, 0x1e, 0xfc, 0x09, 0x00, 0x00, 0xff,
	0xff, 0x64, 0x28, 0x2b, 0xc7, 0xd9, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpiderServerClient is the client API for SpiderServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpiderServerClient interface {
	ParseList(ctx context.Context, in *ParseListRequest, opts ...grpc.CallOption) (*ParseListResponse, error)
	ParseDetail(ctx context.Context, in *ParseDetailRequest, opts ...grpc.CallOption) (*ParseDetailResponse, error)
}

type spiderServerClient struct {
	cc *grpc.ClientConn
}

func NewSpiderServerClient(cc *grpc.ClientConn) SpiderServerClient {
	return &spiderServerClient{cc}
}

func (c *spiderServerClient) ParseList(ctx context.Context, in *ParseListRequest, opts ...grpc.CallOption) (*ParseListResponse, error) {
	out := new(ParseListResponse)
	err := c.cc.Invoke(ctx, "/spider.SpiderServer/ParseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiderServerClient) ParseDetail(ctx context.Context, in *ParseDetailRequest, opts ...grpc.CallOption) (*ParseDetailResponse, error) {
	out := new(ParseDetailResponse)
	err := c.cc.Invoke(ctx, "/spider.SpiderServer/ParseDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpiderServerServer is the service API for SpiderServer service.
type SpiderServerServer interface {
	ParseList(context.Context, *ParseListRequest) (*ParseListResponse, error)
	ParseDetail(context.Context, *ParseDetailRequest) (*ParseDetailResponse, error)
}

// UnimplementedSpiderServerServer can be embedded to have forward compatible implementations.
type UnimplementedSpiderServerServer struct {
}

func (*UnimplementedSpiderServerServer) ParseList(ctx context.Context, req *ParseListRequest) (*ParseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseList not implemented")
}
func (*UnimplementedSpiderServerServer) ParseDetail(ctx context.Context, req *ParseDetailRequest) (*ParseDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseDetail not implemented")
}

func RegisterSpiderServerServer(s *grpc.Server, srv SpiderServerServer) {
	s.RegisterService(&_SpiderServer_serviceDesc, srv)
}

func _SpiderServer_ParseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderServerServer).ParseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spider.SpiderServer/ParseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderServerServer).ParseList(ctx, req.(*ParseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpiderServer_ParseDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiderServerServer).ParseDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spider.SpiderServer/ParseDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiderServerServer).ParseDetail(ctx, req.(*ParseDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SpiderServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spider.SpiderServer",
	HandlerType: (*SpiderServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParseList",
			Handler:    _SpiderServer_ParseList_Handler,
		},
		{
			MethodName: "ParseDetail",
			Handler:    _SpiderServer_ParseDetail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spider.proto",
}

func (m *ParseListResponseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParseListResponseItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.Ext != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpider(dAtA, i, uint64(m.Ext.Size()))
		n1, err1 := m.Ext.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	return i, nil
}

func (m *ParseListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParseListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *ParseListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParseListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, msg := range m.Item {
			dAtA[i] = 0xa
			i++
			i = encodeVarintSpider(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ParseDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParseDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Url) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Content) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.Content)))
		i += copy(dAtA[i:], m.Content)
	}
	return i, nil
}

func (m *ParseDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParseDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CompanyName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.CompanyName)))
		i += copy(dAtA[i:], m.CompanyName)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.City) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.City)))
		i += copy(dAtA[i:], m.City)
	}
	if len(m.JobType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.JobType)))
		i += copy(dAtA[i:], m.JobType)
	}
	if len(m.Site) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.Site)))
		i += copy(dAtA[i:], m.Site)
	}
	if len(m.BaseId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.BaseId)))
		i += copy(dAtA[i:], m.BaseId)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.JobCategory) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.JobCategory)))
		i += copy(dAtA[i:], m.JobCategory)
	}
	if len(m.LastUpdateTime) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.LastUpdateTime)))
		i += copy(dAtA[i:], m.LastUpdateTime)
	}
	if len(m.JobCreateTime) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.JobCreateTime)))
		i += copy(dAtA[i:], m.JobCreateTime)
	}
	if len(m.Country) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.Country)))
		i += copy(dAtA[i:], m.Country)
	}
	if len(m.Location) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintSpider(dAtA, i, uint64(len(m.Location)))
		i += copy(dAtA[i:], m.Location)
	}
	return i, nil
}

func encodeVarintSpider(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ParseListResponseItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	if m.Ext != nil {
		l = m.Ext.Size()
		n += 1 + l + sovSpider(uint64(l))
	}
	return n
}

func (m *ParseListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	return n
}

func (m *ParseListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Item) > 0 {
		for _, e := range m.Item {
			l = e.Size()
			n += 1 + l + sovSpider(uint64(l))
		}
	}
	return n
}

func (m *ParseDetailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	return n
}

func (m *ParseDetailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CompanyName)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	l = len(m.JobType)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	l = len(m.Site)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	l = len(m.BaseId)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	l = len(m.JobCategory)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	l = len(m.LastUpdateTime)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	l = len(m.JobCreateTime)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	l = len(m.Country)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovSpider(uint64(l))
	}
	return n
}

func sovSpider(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpider(x uint64) (n int) {
	return sovSpider(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ParseListResponseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParseListResponseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParseListResponseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ext == nil {
				m.Ext = &ParseDetailResponse{}
			}
			if err := m.Ext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParseListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParseListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParseListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParseListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParseListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParseListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Item = append(m.Item, &ParseListResponseItem{})
			if err := m.Item[len(m.Item)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParseDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParseDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParseDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParseDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpider
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParseDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParseDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompanyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CompanyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Site", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Site = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobCategory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobCategory = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastUpdateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobCreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobCreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Country = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpider
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpider
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpider(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpider
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpider
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpider(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpider
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpider
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpider
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSpider
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSpider
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSpider(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSpider
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSpider = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpider   = fmt.Errorf("proto: integer overflow")
)
